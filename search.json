[
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "Summary",
    "section": "",
    "text": "Summary\n\n\nSeveral of the disadvantages of running simulations on the web can be overcome by running a Python model entirely in the client’s web browser using WebAssembly: a compact, binary instruction language that runs with near-native performance. A key distribution is Pyodide: the CPython interpreter compiled to WebAssembly using emscripten. A number of key packages from the python scientific stack have also been compiled to WebAssembly and are included in the distribution e.g. including NumPy, Pandas, and Matplotlib. Pure Python packages, (e.g. simpy or salabim) can also be installed at runtime and run against Pyodide.\n\nJupyterlite is a WebAssembly build of the popular Jupyter IDE and runs in a user’s browser. It serves static content and uses either the pyodide or xeus-python kernels to execute Python code. This means it is possible to build interactive webpages on sites such as GitHub pages that contain simulation models in Jupyter notebooks . As JupyterLite serves static content and model computation happens in the client’s web browser, authors do not need to rely on limited-capacity or costly hosting sites. In comparison, server-reliant cloud-based services like mybinder.org can be slow to build the environment, especially with infrequent access, and have limited resource allocations.\nIn Jupyterlite, notebooks are downloaded to the local machine from a URL, and are stored in the browser’s cache. The user can make changes to the model or create new files, and these persist until the browser cache is cleared.\n\nThe relative merits are:\n\nAs all the components are on the client side, once all resources are loaded from web servers the model can run offline.\nModel parameters/data are not sent to any remote servers and are only processed locally within users’ machines. Without the need to manage servers, the security risks associated with server vulnerabilities are mitigated. Similarly, files can be downloaded and output data can be safely exported locally.\nWithout the need for server side computation, there are no costs associated with server maintenance and scaling.\nUnlike environments that require building and launching a server, Jupyterlite has no server startup time and launches instantly.\nAs it runs in the browser, the simulation is accessible on any device without needing specific software installations. This provides an interactive web application with the computational capabilities of Python but no need to install Python or any libraries.\nWebAssembly can be potentially suitable for computationally intensive simulations. However, it is limited by the client’s machine resources (CPU, memory) and the browser’s capabilities.\nFor M&S reuse, a link to a JupyterLite model with all notebooks, datasets and libraries configured can make it very easy for users to get started without setup barriers.\nEvery user accesses the same software environment directly in their browser, ensuring consistency and reliability.\n\nThe trade-offs are:\n\nJupyterLite kernels (e.g.\nPyodide) include a limited set of Python packages compiled to WebAssembly. This means not all Python libraries are available, and not all (but most) of the features of JupyterLab and Classic Notebooks are supported.\nThe simulation’s performance and capability might be limited by the user’s browser and hardware.\nJupyterLite, being browser-based, does not support traditional multithreading due to its architecture.\nAlthough JupyterLite is currently being developed by core Jupyter developers, the project is still unofficial as of the time of writing.\nThe deployed model in Jupyter notebooks will display a mixture of exposed code, markdown, and outputs such as results, tables, and charts. Changing parameters will require interacting with code directly. The notebooks therefore need to be designed for clarity, interactivity, and aesthetic appeal. Stlite offers a user-friendly alternative, with a web app user interface using Streamlit.\n\n\n\nFor healthcare a runnable version of a simulation model can be shared alongside a publication. The code allows others to replicate the simulation results, tables, and charts in a paper and allows others to reuse the model. The model is immediately usable without the need to install Python, the discrete-event simulation package, or any other dependencies. This can either reduce load on online open science compute infrastructure, or doesn’t rely on it all. Additionally, users may want to use a version of their own data but due to governance, ethics, or other reason, cannot upload the data to a remote instance of the model. WebAssembly overcomes this issue.\n\n\nFor education students can interact with pre-built simulations directly in their web browsers without needing to install any software. This allows them to focus on learning the concepts of simulation rather than dealing with technical setup issues. As JupyterLite runs in a web browser, students can access simulations from any device, including laptops, tablets, and even smartphones. This ensures that all students, regardless of their hardware and technical expertise, have equal access to learning resources. The approach can be easily scaled to accommodate large numbers of students without the need for additional infrastructure.All students access the same software environment, ensuring consistency in the learning experience. This uniformity helps to standardise teaching materials and assessments.\nFor education, WebAssembly overcomes many hurdles. It allows executable models to be made available with no installation requirements, lowering the barrier to entry. It works on any web browser, making it accessible to a wider range of students, regardless of their operating system. Once loaded, it is available without an internet connection, enabling students to work with the notebooks with limited or no connectivity. It also reduces infrastructure costs, and simplifies resource management for educational institutions, as it can be deployed to any number of students without worrying about server capacity or load balancing."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "WebAssembly has been described as a transformative technology, with expansive reach (Sletten 2021). Here, it is proposed as a method for deploying simulation models directly to NHS users, with the aim of supporting healthcare operational decision-making using discrete event simulation. The aim is to allow simulation models, as complex analytic tools, to run directly in the user’s browser without the need to install any components on the local machine. This makes models more accessible and user-friendly, and ensures that all computations are performed locally enhances data security by keeping sensitive healthcare information within the user’s own browser environment (Figure 1). This will be explored in the section “What is WebAssembly?”.\n\n\n\n\n\nflowchart LR\n  A[Healthcare Decision-support requirement] --&gt; B{WebAssembly}\n  B --&gt; |Runs locally| C(Simulation Model)\n  B --&gt; |Accessed locally| D(Sensitive Data)\n\n\n\n\n\n\nFigure 1: Simulation accessibility for healthcare\n\n\n\n\nThis project explores a further potential use for WebAssembly - its applicability to education. Specifically, it can improve accessibility of models for students. This can help students to learn about simulation modelling as a method of supporting operational, strategic, and supply chain resourcing, planning, and configuring. WebAssembly enables the model to run in a web browser, so students can access simulations from any device. This ensures that all students, regardless of their hardware, technical expertise, and geographical location, have equal access to learning resources (Figure 2). This is explored in the section “Simulation for education”.\n\n\n\n\n\nflowchart LR\n  A[Student learning about simulation] --&gt; B{WebAssembly}\n  B --&gt; |Runs on any machine| C(Simulation Model)\n  B --&gt; |Runs in any location| D(Simulation Model)\n\n\n\n\n\n\nFigure 2: Simulation accessibility for students\n\n\n\n\n\n\n\n\n\n\nWhat is WebAssembly doing?\n\n\n\n\n\nThis webpage is built using Quarto. Quarto is a publishing system that can generate static sites, making it a useful way of documenting code, analysis, text, and outputs. It is a great way of presenting work to project stakeholders and sharing detailed work with academic audiences. It can also be useful in education, providing a shareable book that students can follow without needing internet access. Using WebAssembly provides a way of integrating interactive code into the book, which can be changed and re-run as often as needed.\nTo illustrate, here are some examples of Python code blocks using Pyodide (a WebAssembly implentation of Python for Quarto, using quarto-pyodide (Balamuta 2024)). These code cells use Python, without requiring a download or installation. You can interact with the code, modify it, and run it direclty in the browser.\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTry this one! Feel free to change any of the characters, settings, conflicts or resolutions to create your own random stories.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThese applications use Pyodide, which creates an interaction between Javascript and Python.\nHere is a shortish video that explains in more detail how the technology works."
  },
  {
    "objectID": "index.html#formative-assessment-for-app-researcheducation-nexus",
    "href": "index.html#formative-assessment-for-app-researcheducation-nexus",
    "title": "Introduction",
    "section": "",
    "text": "WebAssembly has been described as a transformative technology, with expansive reach (Sletten 2021). Here, it is proposed as a method for deploying simulation models directly to NHS users, with the aim of supporting healthcare operational decision-making using discrete event simulation. The aim is to allow simulation models, as complex analytic tools, to run directly in the user’s browser without the need to install any components on the local machine. This makes models more accessible and user-friendly, and ensures that all computations are performed locally enhances data security by keeping sensitive healthcare information within the user’s own browser environment (Figure 1). This will be explored in the section “What is WebAssembly?”.\n\n\n\n\n\nflowchart LR\n  A[Healthcare Decision-support requirement] --&gt; B{WebAssembly}\n  B --&gt; |Runs locally| C(Simulation Model)\n  B --&gt; |Accessed locally| D(Sensitive Data)\n\n\n\n\n\n\nFigure 1: Simulation accessibility for healthcare\n\n\n\n\nThis project explores a further potential use for WebAssembly - its applicability to education. Specifically, it can improve accessibility of models for students. This can help students to learn about simulation modelling as a method of supporting operational, strategic, and supply chain resourcing, planning, and configuring. WebAssembly enables the model to run in a web browser, so students can access simulations from any device. This ensures that all students, regardless of their hardware, technical expertise, and geographical location, have equal access to learning resources (Figure 2). This is explored in the section “Simulation for education”.\n\n\n\n\n\nflowchart LR\n  A[Student learning about simulation] --&gt; B{WebAssembly}\n  B --&gt; |Runs on any machine| C(Simulation Model)\n  B --&gt; |Runs in any location| D(Simulation Model)\n\n\n\n\n\n\nFigure 2: Simulation accessibility for students\n\n\n\n\n\n\n\n\n\n\nWhat is WebAssembly doing?\n\n\n\n\n\nThis webpage is built using Quarto. Quarto is a publishing system that can generate static sites, making it a useful way of documenting code, analysis, text, and outputs. It is a great way of presenting work to project stakeholders and sharing detailed work with academic audiences. It can also be useful in education, providing a shareable book that students can follow without needing internet access. Using WebAssembly provides a way of integrating interactive code into the book, which can be changed and re-run as often as needed.\nTo illustrate, here are some examples of Python code blocks using Pyodide (a WebAssembly implentation of Python for Quarto, using quarto-pyodide (Balamuta 2024)). These code cells use Python, without requiring a download or installation. You can interact with the code, modify it, and run it direclty in the browser.\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTry this one! Feel free to change any of the characters, settings, conflicts or resolutions to create your own random stories.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThese applications use Pyodide, which creates an interaction between Javascript and Python.\nHere is a shortish video that explains in more detail how the technology works."
  },
  {
    "objectID": "notebooks/Sim_ed2.html",
    "href": "notebooks/Sim_ed2.html",
    "title": "Simulation for education",
    "section": "",
    "text": "The history of modelling and simulation (M&S) spans hundreds of years, and many domains, including transportation, healthcare, enegineering, and defence. With the growth of computing technology, network technology, and simultaneously, problem space complexity, the last thirty years have seen a rapid evolution in both industry applications and in M&S academic programmes. Students can represent ‘users’ or ‘developers’ (Sokolowski and Mielke 2017). Users aim to utilise M&S methods, appropriately applied to their domain of interest. Developers study M&S as a discipline, learning the technical details to develop and enhance M&S methodology. These are two different education paths, and educational approaches are required that can address the needs and requirements of both academic paths (Tolk 2017). WebAssembly has been used for other education applications, due to its interactivity and accessibility (Agustia and Wulan 2019)."
  },
  {
    "objectID": "notebooks/Sim_ed2.html#implementation-in-education",
    "href": "notebooks/Sim_ed2.html#implementation-in-education",
    "title": "Simulation for education",
    "section": "3. Implementation in Education",
    "text": "3. Implementation in Education\n\n\nCurriculum Integration:\n\nIntegrate JupyterLite simulations into the curriculum to demonstrate theoretical concepts through practical applications.\nUse simulations to teach various types of models, including discrete-event, agent-based, and system dynamics simulations.\n\n\n\nAssignments and Projects:\n\nDesign assignments that require students to modify parameters, run simulations, and analyze results.\nEncourage students to create their own simulation models as projects, fostering creativity and deeper understanding.\n\n\n\nCollaborative Learning:\n\nFacilitate group projects where students collaborate on building and analyzing simulations, promoting teamwork and collective problem-solving.\n\n\n\nAssessment:\n\nUse interactive simulations as part of assessments to test students’ understanding of simulation methods and their ability to apply concepts to solve problems.\n\n\n\nWorkshops and Tutorials:\n\nConduct workshops and tutorials to introduce students to JupyterLite and WebAssembly, teaching them how to leverage these tools for their simulations. By adapting these approaches, educators can leverage the power of WebAssembly and JupyterLite to create a dynamic, accessible, and effective learning environment for teaching simulation methods."
  },
  {
    "objectID": "notebooks/Simulation_education.html",
    "href": "notebooks/Simulation_education.html",
    "title": "What is WebAssembly?",
    "section": "",
    "text": "Teaching-Research Synergy\n\n\nThe use of WebAssembly has significant implications for the deployment of healthcare simulation models for NHS staff use, to support planning their services. It overcomes many of the issues of other methods of deployment, by increasing accessibility, usability, and data security. It also has the potential to address some of the challenges faced for simulation education, which include usability and democratisation of access. The learnings from use in the healthcare sector are proposed to be transferable to education.\n\n\n\n1. Discrete-event Simulation as a method\n\nIn everyday life we encounter the concept of simulation. Weather apps simulate patterns of rainfall and atmosphere dynamics over the coming hours and days. Simulations help understand how diseases or pollutants spread. Urban planners use simulation to study traffic patterns and plan road layouts, or flood risks to plan new developments.\nDiscrete-event simulation (DES) is a type of computer simulation used to model the operation of complex systems, as a sequence of discrete events in time. Events might be arrivals, departures, starting or ending of services, or failures or repairs of resources. Many systems modelled using DES involve queues or delays, so processes are often modelled in terms of a series of queues and servers. As events usually occur at random times, and may have random effects, simulation incorporates elements of probability to reflect this real-life randomness.\nA DES model can be seen as a computer representation of a system. Running it over time replicates the behaviour of the system over time. Simulation is often used where research on the real system is not possible, due to inaccessibility, risks, or costs. Experimentation with the simulation model is used instead of experimenting with the real system.\n\n\n\n2. Research focus\n\n2.1 Reuse of simulation models in healthcare\n\nDES models are widely used for decision-support in healthcare, for example for demand and capacity planning of health services. However, they are time-consuming to develop for both modellers and healthcare stakeholders, and are often treated as disposable artefacts, once results have been analysed and delivered. Additionally, for healthcare M&S researchers, a long-standing challenge is translating model results into real-world practice. While many factors contribute to successful model uptake, the aim is to overcome some of the barriers to model use in healthcare by enabling healthcare decision-makers to access and use the model.\nAcross healthcare services, similar problems are seen in similar application areas. Model reuse is seen as a potential solution to reduce duplication of effort and maximise the potential value gained from the model. Model reuse can involve re-developing, modifying, or reparaterising an existing model. Another approach to model reuse is to deploy a simulation model for the same purpose in a single application area, which can be used repeatedly for planning by healthcare staff such as managers, clinicians or analysts.\nA model deployed for reuse by healthcare stakeholders needs to be available and accessible. Purpose built software can make this easy, but may come with prohibitive licensing arrangements and costs. While Python democratises the availability of software, and with appropriate open licensing, allows models to be freely shared and adapted, programming languages such as Python can present accessibility and usability challenges for non-technical users, who may most benefit from their use.\n\n\n\n2.2 Simulation model deployment options\n\nModel deployment refers to the process of taking a validated DES model and making it available for use in real-world applications. It transitions a model from a development setting, where it is tested and validated, to an operational setting where it can provide practical value.\nThe choice of deployment method should be tailored to fit the specific needs of stakeholders and the user-base within a project, as different methods of deployment come with advantages and disadvantages.\nUsing Jupyter, models, including their source code, can be deployed as static files, interactive web pages, or hosted on platforms like GitHub, Binder, or Google Colab. They can also be shared as web apps, with user-friendly interfaces, via free platforms such as Streamlit Community Cloud. While these are convenient ways to share a model, free or limited-capacity platforms restrict the number of processors available, memory, and/or bandwidth. Some, such as ShinyApps, offer monthly paid plans to increase computational resources, which may not be budgeted into a project. In healthcare, a bigger issue is the potential need to use sensitive data or parameters, which may require a private, local instance of a model where model parameters/data are not sent to any remote servers, so server vulnerabilities are mitigated.\nA standard approach is to commit code and virtual environments files to GitHub (or alternative repository) which can then be downloaded and run locally (Monks, Harper, and Mustafee 2024). Using Conda environments allows for a controlled setup that maintains dependencies without complex configurations. For NHS users with limited technical support, this can present barriers. WebAssembly is an alternative approach for local processing which eliminates the need for complex software installation processes. Input files are used locally, and output files and data be safely exported to the users laptop or desktop. Additionally, every user accesses the same software environment directly in their browser, ensuring consistency, reliability, and reproducibility of model results.\n\n\n\n2.2.1 Models as Notebooks: Jupyter and JupyterLite\n\nJupyter Notebooks and Jupyterlab provide a web-based interactive computing platform which allows users to create and share ‘notebooks’, which execute code, equations, visualisations and narrative text in a step-by-step manner. This is particularly beneficial for data analysis, prototyping, and education.\n\n\n\n\n\nFigure 1: Jupyter architecture\n\n\n\nUsing WebAssembly, JupyterLite is a lightweight version of Jupyter that runs entirely in the browser without the need for server-side infrastructure. Jupyter notebooks can be created and run locally without installing anything on their machines. It is fast, portable, and easily deployable, making it ideal for lightweight computing tasks and educational purposes.\n\n\n\n\n\nFigure 2: JupyterLite architecture\n\n\n\n\n2.2.2 Models with an interface: Streamlit and Stlite\n\nStreamlit is a Python library that allows modellers to quickly create interactive web applications for their DES models, and other data science projects. It simplifies the process of building custom web interfaces by providing easy-to-use widgets and tools for changing simulation parameters and visualising data.\n\n\n\n\nFigure 3: Streamlit architecture\n\n\n\nStlite is a WebAssembly implementation of Streamlit, enabling the creation of web applications using Python syntax, but compiled to run in the browser. This allows for building interactive DES models without the need for a server backend. It is fast and flexible, and ideal for lightweight tasks such as enabling NHS stakeholders to access and use a model. It is particularly suitable for rapid prototyping during a project, and for ease-of-use after a project end.\n\n\n\n\nFigure 4: Stlite architecture\n\n\n\n\n\n3. Summary of deploying models for healthcare research\n\n\nIn healthcare, reusable models have the potential to increase the impact of a modelling and simulation study, by making models available for direct use by NHS stakeholders. Attention needs to be given to deploying models that are accessible, usable, and functional in line with the needs of non-technical stakeholders. However, healthcare models also need to focus on security of sensitive data, and WebAssembly of code notebooks or model interfaces addresses this issue with client-side execution.\n\n\n\n\n\n\n\nReferences\n\nMonks, Thomas, Alison Harper, and Navonil Mustafee. 2024. “Towards Sharing Tools and Artefacts for Reusable Simulations in Healthcare.” Journal of Simulation, 1–20."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "notebooks/Reflection.html",
    "href": "notebooks/Reflection.html",
    "title": "APP-WASM-formative",
    "section": "",
    "text": "This website was built using Quarto,  an open-source scientific and technical publishing system. Check it out!\n\n\n\nHere is an example of a simulation model  developed in Python and deployed using JupyterLite. Click on 01_urgent_care_model.ipynb. The code is interactive or you can run the whole model using the baseline parameters and generate reproducible outputs. With thanks to Tom Monks.\n\n\n\nI am interested in different ways that technology can be used to support education. I am also conscious that we are increasingly being overwhelmed with digital information and demands. We have unparalleled access to information, interactive learning experiences, and innovative teaching tools. From online courses, and digital textbooks, to interactive simulations and AI-driven personalised learning, technologty supports education in numerous ways. However, this proliferation of digital offerings also brings the risk of information overload digital fatigue, which can hinder the learning process rather than enhance it.\nNonetheless, there are opportunities to make education more accessible, breaking down geographical barriers and providing resources to students regardless of their location and resources. WebAssembly provides such an opportunity. Simulation is an employable skill, but access to commercial packages holds cost barriers, while access to code in, for example, Python or R, setting up dependency management, and running the code without issues presents technical barriers. I can see how WebAssembly can support both healthcare users to implement models as research outputs. I believe it to be a useful technology to support students of simulation, in particular those who are ‘users’ of simulation, rather than ‘developers’. Business Analytics students in the Business School are good examples of students who may benefit from this technology. They can quickly pick up enough code to clean, pre-process data and explore data, and implement simple analyses. More complex analyses, such as simulation needs more time to learn the theory of simulation, code the model, interact with the model, debug, generate and interpret results etc. By using a method that improves model accessibility, students can focus on learning the method, and interacting with code without concern of being unable to get it running on their device, breaking the code, or getting too deeply concerned about what the code is doing and forgetting to focus on the modelling principles.\nThis is a bit technical because I intend to write it up as a paper (WebAssembly is not used in healthcare M&S research, but has great potential to improve model accessibility and help to make simulation modelling a method that is useful and impactful for supporting healthcare service planning.\nFinally, I used Quarto for two reasons. Partly, it was an opportunity to put a Quarto website into practice - as another potentially excellent resource for both research and education. It has endless potential for delivering and presenting material to a wide variety of audiences. Secondly, I wanted to demonstrate WebAssembly in practice - embedded in the Introduction with some fun examples, and above, as link to a simulation model of an urgent care centre, to illustrate its application in practice. More details of the simulation model can be found here."
  },
  {
    "objectID": "notebooks/Reflection.html#reflection",
    "href": "notebooks/Reflection.html#reflection",
    "title": "APP-WASM-formative",
    "section": "",
    "text": "This website was built using Quarto,  an open-source scientific and technical publishing system. Check it out!\n\n\n\nHere is an example of a simulation model  developed in Python and deployed using JupyterLite. Click on 01_urgent_care_model.ipynb. The code is interactive or you can run the whole model using the baseline parameters and generate reproducible outputs. With thanks to Tom Monks.\n\n\n\nI am interested in different ways that technology can be used to support education. I am also conscious that we are increasingly being overwhelmed with digital information and demands. We have unparalleled access to information, interactive learning experiences, and innovative teaching tools. From online courses, and digital textbooks, to interactive simulations and AI-driven personalised learning, technologty supports education in numerous ways. However, this proliferation of digital offerings also brings the risk of information overload digital fatigue, which can hinder the learning process rather than enhance it.\nNonetheless, there are opportunities to make education more accessible, breaking down geographical barriers and providing resources to students regardless of their location and resources. WebAssembly provides such an opportunity. Simulation is an employable skill, but access to commercial packages holds cost barriers, while access to code in, for example, Python or R, setting up dependency management, and running the code without issues presents technical barriers. I can see how WebAssembly can support both healthcare users to implement models as research outputs. I believe it to be a useful technology to support students of simulation, in particular those who are ‘users’ of simulation, rather than ‘developers’. Business Analytics students in the Business School are good examples of students who may benefit from this technology. They can quickly pick up enough code to clean, pre-process data and explore data, and implement simple analyses. More complex analyses, such as simulation needs more time to learn the theory of simulation, code the model, interact with the model, debug, generate and interpret results etc. By using a method that improves model accessibility, students can focus on learning the method, and interacting with code without concern of being unable to get it running on their device, breaking the code, or getting too deeply concerned about what the code is doing and forgetting to focus on the modelling principles.\nThis is a bit technical because I intend to write it up as a paper (WebAssembly is not used in healthcare M&S research, but has great potential to improve model accessibility and help to make simulation modelling a method that is useful and impactful for supporting healthcare service planning.\nFinally, I used Quarto for two reasons. Partly, it was an opportunity to put a Quarto website into practice - as another potentially excellent resource for both research and education. It has endless potential for delivering and presenting material to a wide variety of audiences. Secondly, I wanted to demonstrate WebAssembly in practice - embedded in the Introduction with some fun examples, and above, as link to a simulation model of an urgent care centre, to illustrate its application in practice. More details of the simulation model can be found here."
  },
  {
    "objectID": "notebooks/Introduction.html#teaching-research-synergy",
    "href": "notebooks/Introduction.html#teaching-research-synergy",
    "title": "WebAssembly for discrete event simulation",
    "section": "Teaching-Research Synergy",
    "text": "Teaching-Research Synergy\n\nThe use of WebAssembly potentially has significant implications for the deployment of healthcare simulation models for NHS staff use, to support planning their services. It overcomes many of the issues of other methods of deployment, by increasing accessibility, usability, and data security. It also has the potential to address some of the challenges faced for simulation education, which include usability and democratisation of access. The learnings from use in the healthcare sector are proposed to be transferable to education.\n\n\n1. Discrete-event Simulation as a method\nIn everyday life we encounter the concept of simulation. Weather apps simulate patterns of rainfall and atmosphere dynamics over the coming hours and days. Simulations help understand how diseases or pollutants spread. Urban planners use simulation to study traffic patterns and plan road layouts, or flood risks to plan new developments.\nDiscrete-event simulation (DES) is a type of computer simulation used to model the operation of complex systems, as a sequence of discrete events in time. Events might be arrivals, departures, starting or ending of services, or failures or repairs of resources. Many systems modelled using DES involve queues or delays, so processes are often modelled in terms of a series of queues and servers. As events usually occur at random times, and may have random effects, simulation incorporates elements of probability to reflect this real-life randomness.\nA DES model can be seen as a computer representation of a system. Running it over time replicates the behaviour of the system over time. Simulation is often used where research on the real system is not possible, due to inaccessibility, risks, or costs. Experimentation with the simulation model is used instead of experimenting with the real system.\n\n\n2. Research focus\n\n2.1 Reuse of simulation models in healthcare\nDES models are widely used for decision-support in healthcare, for example for demand and capacity planning of health services. However, they are time-consuming to develop for both modellers and healthcare stakeholders, and are often treated as disposable artefacts, once results have been analysed and delivered. Additionally, for healthcare M&S researchers, a long-standing challenge is translating model results into real-world practice. While many factors contribute to successful model uptake, the aim is to overcome some of the barriers to model use in healthcare by enabling healthcare decision-makers to access and use the model.\nAcross healthcare services, similar problems are seen in similar application areas. Model reuse is seen as a potential solution to reduce duplication of effort and maximise the potential value gained from the model. Model reuse can involve re-developing, modifying, or reparaterising an existing model. Another approach to model reuse is to deploy a simulation model for the same purpose in a single application area, which can be used repeatedly for planning by healthcare staff such as managers, clinicians or analysts.\nA model deployed for reuse by healthcare stakeholders needs to be available and accessible. Purpose built software can make this easy, but may come with prohibitive licensing arrangements and costs. While Python democratises the availability of software, and with appropriate open licensing, allows models to be freely shared and adapted, programming languages such as Python can present accessibility and usability challenges for non-technical users, who may most benefit from their use.\n\n\n2.2 Simulation model deployment options\nModel deployment refers to the process of taking a validated DES model and making it available for use in real-world applications. It transitions a model from a development setting, where it is tested and validated, to an operational setting where it can provide practical value.\nThe choice of deployment method should be tailored to fit the specific needs of stakeholders and the user-base within a project, as different methods of deployment come with advantages and disadvantages.\nUsing Jupyter, models, including their source code, can be deployed as static files, interactive web pages, or hosted on platforms like GitHub, Binder, or Google Colab. They can also be shared as web apps, with user-friendly interfaces, via free platforms such as Streamlit Community Cloud. While these are convenient ways to share a model, free or limited-capacity platforms restrict the number of processors available, memory, and/or bandwidth. Some, such as ShinyApps, offer monthly paid plans to increase computational resources, which may not be budgeted into a project. In healthcare, a bigger issue is the potential need to use sensitive data or parameters, which may require a private, local instance of a model where model parameters/data are not sent to any remote servers, so server vulnerabilities are mitigated.\nA standard approach is to commit code and virtual environments files to GitHub (or alternative repository) which can then be downloaded and run locally. Using Conda environments allows for a controlled setup that maintains dependencies without complex configurations. For NHS users with limited technical support, this can present barriers. WebAssembly is an alternative approach for local processing which eliminates the need for complex software installation processes. Input files are used locally, and output files and data be safely exported to the users laptop or desktop. Additionally, every user accesses the same software environment directly in their browser, ensuring consistency, reliability, and reproducibility of model results.\n\n\n2.2.1 Models as Notebooks: Jupyter and JupyterLite\nJupyter Notebooks and Jupyterlab provide a web-based interactive computing platform which allows users to create and share ‘notebooks’, which execute code, equations, visualisations and narrative text in a step-by-step manner. This is particularly beneficial for data analysis, prototyping, and education.\n\n\n\nJupyter architecture\n\n\n\nUsing WebAssembly, JupyterLite is a lightweight version of Jupyter that runs entirely in the browser without the need for server-side infrastructure. Jupyter notebooks can be created and run locally without installing anything on their machines. It is fast, portable, and easily deployable, making it ideal for lightweight computing tasks and educational purposes.\n\n\n\n\nFigure 2: JupyterLite architecture\n\n\n\n\n2.2.2 Models with an interface: Streamlit and Stlite\nStreamlit is a Python library that allows modellers to quickly create interactive web applications for their DES models, and other data science projects. It simplifies the process of building custom web interfaces by providing easy-to-use widgets and tools for changing simulation parameters and visualising data.\n\n\n\nFigure 3: Streamlit architecture\n\n\nStlite is a WebAssembly implementation of Streamlit, enabling the creation of web applications using Python syntax, but compiled to run in the browser. This allows for building interactive DES models without the need for a server backend. It is fast and flexible, and ideal for lightweight tasks such as enabling NHS stakeholders to access and use a model. It is particularly suitable for rapid prototyping during a project, and for ease-of-use after a project end.\n\n\n\nFigure 4: Stlite architecture\n\n\n\n\n\n3. Summary of deploying models for healthcare research\n\nIn healthcare, reusable models have the potential to increase the impact of a modelling and simulation study, by making models available for direct use by NHS stakeholders. Attention needs to be given to deploying models that are accessible, usable, and functional in line with the needs of non-technical stakeholders. However, healthcare models also need to focus on security of sensitive data, and WebAssembly of code notebooks or model interfaces addresses this issue with client-side execution"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Introduction\nThis is a book created from markdown and executable code.\nSee @knuth84 for additional discussion of literate programming."
  }
]